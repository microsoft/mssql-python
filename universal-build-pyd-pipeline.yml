name: build-pyd-pipeline

# Trigger on main and dev branches
trigger:
  branches:
    include:
      - main
      - dev

# Use Microsoft-hosted Windows runner
pool:
  vmImage: 'windows-latest'

# Define all combinations of Python version + architecture
# NOTE: architecture = host Python arch (used by UsePythonVersion)
#       targetArch = architecture passed to build.bat (can be arm64 etc.)
strategy:
  matrix:
    py311_x64:
      pythonVersion: '3.11'
      shortPyVer: '311'
      architecture: 'x64'
      targetArch: 'x64'
    py311_x86:
      pythonVersion: '3.11'
      shortPyVer: '311'
      architecture: 'x86'
      targetArch: 'x86'
    py311_arm64:
      pythonVersion: '3.11'
      shortPyVer: '311'
      architecture: 'x64'
      targetArch: 'arm64'

    py312_x64:
      pythonVersion: '3.12'
      shortPyVer: '312'
      architecture: 'x64'
      targetArch: 'x64'
    py312_x86:
      pythonVersion: '3.12'
      shortPyVer: '312'
      architecture: 'x86'
      targetArch: 'x86'
    py312_arm64:
      pythonVersion: '3.12'
      shortPyVer: '312'
      architecture: 'x64'
      targetArch: 'arm64'

    py313_x64:
      pythonVersion: '3.13'
      shortPyVer: '313'
      architecture: 'x64'
      targetArch: 'x64'
    py313_x86:
      pythonVersion: '3.13'
      shortPyVer: '313'
      architecture: 'x86'
      targetArch: 'x86'
    py313_arm64:
      pythonVersion: '3.13'
      shortPyVer: '313'
      architecture: 'x64'
      targetArch: 'arm64'

# One job reused for all matrix combinations
jobs:
- job: BuildPYD
  strategy:
    matrix: ${{ variables.matrix }}

  steps:
    # Use the selected Python version and architecture on runner
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        architecture: '$(architecture)'
        addToPath: true
      displayName: 'Use Python $(pythonVersion) ($(architecture))'

    # Install Python + CMake + PyBind11 dependencies
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install cmake pybind11
      displayName: 'Install dependencies'

    # Run the build.bat with the targetArch
    - script: |
        echo "Python: $(pythonVersion), Arch: $(architecture), Target: $(targetArch)"
        cd "$(Build.SourcesDirectory)\mssql_python\pybind"

        REM If targeting ARM64, set lib path manually (optional)
        if "$(targetArch)"=="arm64" (
          echo Using arm64-specific Python library
          set PYTHON_LIBRARY_PATH=$(Build.SourcesDirectory)\mssql_python\pybind\python_libs\arm64\python$(shortPyVer).lib
        )

        call build.bat $(targetArch)

        cd ..\..
      displayName: 'Build PYD for $(targetArch)'

    # Copy the generated .pyd file to the artifact staging folder
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\mssql_python\pybind\build\$(targetArch)\py$(shortPyVer)\Release'
        Contents: 'ddbc_bindings.cp$(shortPyVer)-*.pyd'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\all-pyds\$(shortPyVer)\$(targetArch)'
      displayName: 'Collect PYD files'

    # Publish all collected artifacts for this build
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\all-pyds'
        ArtifactName: 'mssql-python-all-pyds'
        publishLocation: 'Container'
      displayName: 'Publish PYD artifacts'
