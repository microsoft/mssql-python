# Pipeline name shown in ADO UI
name: build-whl-pipeline

# Trigger the pipeline on changes to the main branch & on pull requests
trigger:
  branches:
    include:
      - main

# Trigger on pull requests targeting the main branch
pr:
  branches:
    include:
      - main

# Schedule the pipeline to run on main branch daily at 07:00 AM IST
schedules:
  - cron: "30 1 * * *"
    displayName: Daily run at 07:00 AM IST
    branches:
      include:
        - main

jobs:
# - job: BuildWindowsWheels
#   # Use the latest Windows image for building
#   pool:
#     vmImage: 'windows-latest'
#   displayName: 'Build Windows -'
#   # Strategy matrix to build all combinations
#   strategy:
#     matrix:
#       # Python 3.10 (only x64)
#       py310_x64:
#         pythonVersion: '3.10'       # Host Python version
#         shortPyVer: '310'           # Used in filenames like cp310
#         architecture: 'x64'         # Host Python architecture
#         targetArch: 'x64'           # Target architecture to pass to build.bat

#       # Python 3.11
#       py311_x64:
#         pythonVersion: '3.11'       # Host Python version
#         shortPyVer: '311'           # Used in filenames like cp311
#         architecture: 'x64'         # Host Python architecture
#         targetArch: 'x64'           # Target architecture to pass to build.bat
#       py311_arm64:
#         pythonVersion: '3.11'
#         shortPyVer: '311'
#         architecture: 'x64'         # No arm64 Python, use x64 host
#         targetArch: 'arm64'

#       # Python 3.12
#       py312_x64:
#         pythonVersion: '3.12'
#         shortPyVer: '312'
#         architecture: 'x64'
#         targetArch: 'x64'
#       py312_arm64:
#         pythonVersion: '3.12'
#         shortPyVer: '312'
#         architecture: 'x64'
#         targetArch: 'arm64'

#       # Python 3.13
#       py313_x64:
#         pythonVersion: '3.13'
#         shortPyVer: '313'
#         architecture: 'x64'
#         targetArch: 'x64'
#       py313_arm64:
#         pythonVersion: '3.13'
#         shortPyVer: '313'
#         architecture: 'x64'
#         targetArch: 'arm64'

#   steps:
#     # Use correct Python version and architecture for the current job
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '$(pythonVersion)'
#         architecture: '$(architecture)'
#         addToPath: true
#       displayName: 'Use Python $(pythonVersion) ($(architecture))'

#     # Install required packages: pip, CMake, pybind11
#     - script: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#         pip install cmake pybind11
#       displayName: 'Install dependencies'

#       # Start LocalDB instance
#     - powershell: |
#         sqllocaldb create MSSQLLocalDB
#         sqllocaldb start MSSQLLocalDB
#       displayName: 'Start LocalDB instance'

#     # Create database and user
#     - powershell: |
#         sqlcmd -S "(localdb)\MSSQLLocalDB" -Q "CREATE DATABASE TestDB"
#         sqlcmd -S "(localdb)\MSSQLLocalDB" -Q "CREATE LOGIN testuser WITH PASSWORD = '$(DB_PASSWORD)'"
#         sqlcmd -S "(localdb)\MSSQLLocalDB" -d TestDB -Q "CREATE USER testuser FOR LOGIN testuser"
#         sqlcmd -S "(localdb)\MSSQLLocalDB" -d TestDB -Q "ALTER ROLE db_owner ADD MEMBER testuser"
#       displayName: 'Setup database and user'
#       env:
#         DB_PASSWORD: $(DB_PASSWORD)

#     - task: DownloadPipelineArtifact@2
#       condition: eq(variables['targetArch'], 'arm64')
#       inputs:
#         buildType: 'specific'
#         project: '$(System.TeamProject)'
#         definition: 2162
#         buildVersionToDownload: 'latest'
#         artifactName: 'mssql-python-arm64-libs'
#         targetPath: '$(Build.SourcesDirectory)\mssql_python\pybind\python_libs\arm64'
#       displayName: 'Download ARM64 Python libs from latest successful run on branches'

#     # Build the PYD file by calling build.bat
#     - script: |
#         echo "Python Version: $(pythonVersion)"
#         echo "Short Tag: $(shortPyVer)"
#         echo "Architecture: Host=$(architecture), Target=$(targetArch)"

#         cd "$(Build.SourcesDirectory)\mssql_python\pybind"

#         REM Optional: override lib path if building for ARM64 since we cannot install arm64 python on x64 host
#         if "$(targetArch)"=="arm64" (
#           echo Using arm64-specific Python library...
#           set CUSTOM_PYTHON_LIB_DIR=$(Build.SourcesDirectory)\mssql_python\pybind\python_libs\arm64
#         )

#         REM Call build.bat to build the PYD file
#         call build.bat $(targetArch)

#         REM Calling keep_single_arch.bat to remove ODBC libs of other architectures
#         call keep_single_arch.bat $(targetArch)

#         cd ..\..
#       displayName: 'Build PYD for $(targetArch)'
#       continueOnError: false

#     # Run pytests before packaging
#     - powershell: |
#         Write-Host "Running pytests to validate bindings"
#         if ("$(targetArch)" -eq "arm64") {
#           Write-Host "Skipping pytests on Windows ARM64"
#         } else {
#           python -m pytest -v
#         }
#       displayName: 'Run pytests'
#       env:
#         DB_CONNECTION_STRING: 'Server=(localdb)\MSSQLLocalDB;Database=TestDB;Uid=testuser;Pwd=$(DB_PASSWORD);TrustServerCertificate=yes'

#     # Copy the built .pyd file to staging folder for artifacts
#     - task: CopyFiles@2
#       inputs:
#         SourceFolder: '$(Build.SourcesDirectory)\mssql_python\pybind\build\$(targetArch)\py$(shortPyVer)\Release'
#         Contents: 'ddbc_bindings.cp$(shortPyVer)-*.pyd'
#         TargetFolder: '$(Build.ArtifactStagingDirectory)\ddbc-bindings\windows'
#       displayName: 'Place PYD file into artifacts directory'

#     # Copy the built .pdb files to staging folder for artifacts
#     - task: CopyFiles@2
#       inputs:
#         SourceFolder: '$(Build.SourcesDirectory)\mssql_python\pybind\build\$(targetArch)\py$(shortPyVer)\Release'
#         Contents: 'ddbc_bindings.cp$(shortPyVer)-*.pdbs'
#         TargetFolder: '$(Build.ArtifactStagingDirectory)\all-pdbs'
#       displayName: 'Place PDB file into artifacts directory'

#     # Build wheel package for the current architecture
#     - script: |
#         python -m pip install --upgrade pip
#         pip install wheel setuptools
#         set ARCHITECTURE=$(targetArch)
#         python setup.py bdist_wheel
#       displayName: 'Build wheel package for Python $(pythonVersion) ($(targetArch))'
    
#     # Copy the wheel file to the artifacts
#     - task: CopyFiles@2
#       inputs:
#         SourceFolder: '$(Build.SourcesDirectory)\dist'
#         Contents: '*.whl'
#         TargetFolder: '$(Build.ArtifactStagingDirectory)\dist'
#       displayName: 'Collect wheel package'    

#     # Publish the collected .pyd file(s) as build artifacts
#     - task: PublishBuildArtifacts@1
#       condition: succeededOrFailed()
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)\ddbc-bindings'
#         ArtifactName: 'mssql-python-ddbc-bindings'
#         publishLocation: 'Container'
#       displayName: 'Publish all PYDs as artifacts'

#     # Publish the python arm64 libraries as build artifacts for next builds if ARM64
#     # We publish them only for ARM64 builds since we cannot install arm64 Python on x64 host
#     # This allows us to reuse the libraries in future ARM64 builds
#     # Publishing will retain the libraries in the build artifacts
#     - task: PublishBuildArtifacts@1
#       condition: eq(variables['targetArch'], 'arm64')
#       inputs:
#         PathtoPublish: '$(Build.SourcesDirectory)\mssql_python\pybind\python_libs\arm64'
#         ArtifactName: 'mssql-python-arm64-libs'
#         publishLocation: 'Container'
#       displayName: 'Publish arm64 libs as artifacts'
    
#     # Publish the collected wheel file(s) as build artifacts
#     - task: PublishBuildArtifacts@1
#       condition: succeededOrFailed()
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)\dist'
#         ArtifactName: 'mssql-python-wheels-dist'
#         publishLocation: 'Container'
#       displayName: 'Publish all wheels as artifacts'

# - job: BuildMacOSWheels
#   # Use the latest macOS image for building
#   pool:
#     vmImage: 'macos-latest'
#   # Display name for the job in Azure DevOps UI
#   displayName: 'Build macOS - '
#   strategy:
#     matrix:
#       # Python 3.13 (universal2 for both arm64 and x86_64)
#       py313_universal2:
#         pythonVersion: '3.13'
#         shortPyVer: '313'
#         # Always use universal2 for macOS
#         targetArch: 'universal2'
      
#       # Python 3.12 (universal2 for both arm64 and x86_64)
#       py312_universal2:
#         pythonVersion: '3.12'
#         shortPyVer: '312'
#         targetArch: 'universal2'

#       # Python 3.11 (universal2 for both arm64 and x86_64)
#       py311_universal2:
#         pythonVersion: '3.11'
#         shortPyVer: '311'
#         targetArch: 'universal2'
      
#       # Python 3.10 (universal2 for both arm64 and x86_64)
#       py310_universal2:
#         pythonVersion: '3.10'
#         shortPyVer: '310'
#         targetArch: 'universal2'

#   steps:
#     # Use correct Python version and architecture for the current job
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '$(pythonVersion)'
#         addToPath: true
#       displayName: 'Use Python $(pythonVersion) (Universal2)'

#     # Install CMake on macOS
#     - script: |
#         brew update
#         brew install cmake
#       displayName: 'Install CMake'

#     # Install required packages: pip, CMake, pybind11
#     - script: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#         pip install cmake pybind11
#       displayName: 'Install dependencies'

#     # Build the .so file by calling build.sh
#     - script: |
#         echo "Python Version: $(pythonVersion)"
#         echo "Short Tag: $(shortPyVer)"
#         echo "Building Universal2 Binary"
#         cd "$(Build.SourcesDirectory)/mssql_python/pybind"
#         # Call build.sh to build the .so file
#         ./build.sh
#       displayName: 'Build .so file'
#       continueOnError: false

#     # Copy the built .so file to staging folder for artifacts
#     - task: CopyFiles@2
#       inputs:
#         SourceFolder: '$(Build.SourcesDirectory)/mssql_python'
#         Contents: '*.so'
#         TargetFolder: '$(Build.ArtifactStagingDirectory)/ddbc-bindings/macOS'
#       displayName: 'Place .so file into artifacts directory'

#     - script: |
#         brew update
#         brew install docker colima

#         # Start Colima with extra resources
#         colima start --cpu 4 --memory 8 --disk 50

#         # Optional: set Docker context (usually automatic)
#         docker context use colima >/dev/null || true

#         # Confirm Docker is operational
#         docker version
#         docker ps
#       displayName: 'Install and start Colima-based Docker'

#     - script: |
#         # Pull and run SQL Server container
#         docker pull mcr.microsoft.com/mssql/server:2022-latest
#         docker run \
#           --name sqlserver \
#           -e ACCEPT_EULA=Y \
#           -e MSSQL_SA_PASSWORD="${DB_PASSWORD}" \
#           -p 1433:1433 \
#           -d mcr.microsoft.com/mssql/server:2022-latest

#         # Starting SQL Server container…
#         for i in {1..30}; do
#           docker exec sqlserver \
#             /opt/mssql-tools18/bin/sqlcmd \
#             -S localhost \
#             -U SA \
#             -P "$DB_PASSWORD" \
#             -C -Q "SELECT 1" && break
#           sleep 2
#         done
#       displayName: 'Pull & start SQL Server (Docker)'
#       env:
#         DB_PASSWORD: $(DB_PASSWORD)

#     # Run Pytest to ensure the bindings work correctly
#     - script: |
#         python -m pytest -v
#       displayName: 'Run Pytest to validate bindings'
#       env:
#         DB_CONNECTION_STRING: 'Driver=ODBC Driver 18 for SQL Server;Server=localhost;Database=master;Uid=SA;Pwd=$(DB_PASSWORD);TrustServerCertificate=yes'

#     # Build wheel package for universal2
#     - script: |
#         python -m pip install --upgrade pip
#         pip install wheel setuptools
#         python setup.py bdist_wheel
#       displayName: 'Build $(pythonVersion) universal2 whl'
    
#     # Copy the wheel file to the artifacts
#     - task: CopyFiles@2
#       inputs:
#         SourceFolder: '$(Build.SourcesDirectory)/dist'
#         Contents: '*.whl'
#         TargetFolder: '$(Build.ArtifactStagingDirectory)/dist'
#       displayName: 'Collect wheel package'
    
#     # Publish the collected .so file(s) as build artifacts
#     - task: PublishBuildArtifacts@1
#       condition: succeededOrFailed()
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)/ddbc-bindings'
#         ArtifactName: 'mssql-python-ddbc-bindings'
#         publishLocation: 'Container'
#       displayName: 'Publish all .so files as artifacts'
    
#     # Publish the collected wheel file(s) as build artifacts
#     - task: PublishBuildArtifacts@1
#       condition: succeededOrFailed()
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)/dist'
#         ArtifactName: 'mssql-python-wheels-dist'
#         publishLocation: 'Container'
#       displayName: 'Publish all wheels as artifacts'

- job: BuildLinuxWheels
  pool:
    vmImage: 'ubuntu-latest'
  displayName: 'Build Linux -'

  strategy:
    matrix:
      # Python 3.10 (x86_64 and ARM64)
      py310_x86_64_ubuntu:
        pythonVersion: '3.10'
        shortPyVer: '310'
        targetArch: 'x86_64'
        dockerPlatform: 'linux/amd64'
        dockerImage: 'ubuntu:22.04'
        distroName: 'Ubuntu'
      py310_arm64_ubuntu:
        pythonVersion: '3.10'
        shortPyVer: '310'
        targetArch: 'arm64'
        dockerPlatform: 'linux/arm64'
        dockerImage: 'ubuntu:22.04'
        distroName: 'Ubuntu'
      py310_x86_64_debian:
        pythonVersion: '3.10'
        shortPyVer: '310'
        targetArch: 'x86_64'
        dockerPlatform: 'linux/amd64'
        dockerImage: 'debian:12'
        distroName: 'Debian'
      py310_arm64_debian:
        pythonVersion: '3.10'
        shortPyVer: '310'
        targetArch: 'arm64'
        dockerPlatform: 'linux/arm64'
        dockerImage: 'debian:12'
        distroName: 'Debian'

      # Python 3.11 (x86_64 and ARM64)
      py311_x86_64_ubuntu:
        pythonVersion: '3.11'
        shortPyVer: '311'
        targetArch: 'x86_64'
        dockerPlatform: 'linux/amd64'
        dockerImage: 'ubuntu:22.04'
        distroName: 'Ubuntu'
      py311_arm64_ubuntu:
        pythonVersion: '3.11'
        shortPyVer: '311'
        targetArch: 'arm64'
        dockerPlatform: 'linux/arm64'
        dockerImage: 'ubuntu:22.04'
        distroName: 'Ubuntu'
      py311_x86_64_debian:
        pythonVersion: '3.11'
        shortPyVer: '311'
        targetArch: 'x86_64'
        dockerPlatform: 'linux/amd64'
        dockerImage: 'debian:12'
        distroName: 'Debian'
      py311_arm64_debian:
        pythonVersion: '3.11'
        shortPyVer: '311'
        targetArch: 'arm64'
        dockerPlatform: 'linux/arm64'
        dockerImage: 'debian:12'
        distroName: 'Debian'

      # Python 3.12 (x86_64 and ARM64)
      py312_x86_64_ubuntu:
        pythonVersion: '3.12'
        shortPyVer: '312'
        targetArch: 'x86_64'
        dockerPlatform: 'linux/amd64'
        dockerImage: 'ubuntu:22.04'
        distroName: 'Ubuntu'
      py312_arm64_ubuntu:
        pythonVersion: '3.12'
        shortPyVer: '312'
        targetArch: 'arm64'
        dockerPlatform: 'linux/arm64'
        dockerImage: 'ubuntu:22.04'
        distroName: 'Ubuntu'
      py312_x86_64_debian:
        pythonVersion: '3.12'
        shortPyVer: '312'
        targetArch: 'x86_64'
        dockerPlatform: 'linux/amd64'
        dockerImage: 'debian:12'
        distroName: 'Debian'
      py312_arm64_debian:
        pythonVersion: '3.12'
        shortPyVer: '312'
        targetArch: 'arm64'
        dockerPlatform: 'linux/arm64'
        dockerImage: 'debian:12'
        distroName: 'Debian'

      # Python 3.13 (x86_64 and ARM64)
      py313_x86_64_ubuntu:
        pythonVersion: '3.13'
        shortPyVer: '313'
        targetArch: 'x86_64'
        dockerPlatform: 'linux/amd64'
        dockerImage: 'ubuntu:22.04'
        distroName: 'Ubuntu'
      py313_arm64_ubuntu:
        pythonVersion: '3.13'
        shortPyVer: '313'
        targetArch: 'arm64'
        dockerPlatform: 'linux/arm64'
        dockerImage: 'ubuntu:22.04'
        distroName: 'Ubuntu'
      py313_x86_64_debian:
        pythonVersion: '3.13'
        shortPyVer: '313'
        targetArch: 'x86_64'
        dockerPlatform: 'linux/amd64'
        dockerImage: 'debian:12'
        distroName: 'Debian'
      py313_arm64_debian:
        pythonVersion: '3.13'
        shortPyVer: '313'
        targetArch: 'arm64'
        dockerPlatform: 'linux/arm64'
        dockerImage: 'debian:12'
        distroName: 'Debian'

  steps:
  # Set up Docker buildx for multi-architecture support
  - script: |
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      docker buildx create --name multiarch --driver docker-container --use || true
      docker buildx inspect --bootstrap
    displayName: 'Setup Docker buildx for multi-architecture support'

  - script: |
      # Create a Docker container for building
      docker run -d --name build-container-$(distroName)-$(targetArch) \
        --platform $(dockerPlatform) \
        -v $(Build.SourcesDirectory):/workspace \
        -w /workspace \
        --network bridge \
        $(dockerImage) \
        tail -f /dev/null
    displayName: 'Create $(distroName) $(targetArch) container'

  - script: |
      # Start SQL Server container (always x86_64 since SQL Server doesn't support ARM64)
      docker run -d --name sqlserver-$(distroName)-$(targetArch) \
        --platform linux/amd64 \
        -e ACCEPT_EULA=Y \
        -e MSSQL_SA_PASSWORD="$(DB_PASSWORD)" \
        -p 1433:1433 \
        mcr.microsoft.com/mssql/server:2022-latest
      
      # Wait for SQL Server to be ready
      echo "Waiting for SQL Server to start..."
      for i in {1..60}; do
        if docker exec sqlserver-$(distroName)-$(targetArch) \
          /opt/mssql-tools18/bin/sqlcmd \
          -S localhost \
          -U SA \
          -P "$(DB_PASSWORD)" \
          -C -Q "SELECT 1" >/dev/null 2>&1; then
          echo "SQL Server is ready!"
          break
        fi
        echo "Waiting... ($i/60)"
        sleep 2
      done
      
      # Create test database
      docker exec sqlserver-$(distroName)-$(targetArch) \
        /opt/mssql-tools18/bin/sqlcmd \
        -S localhost \
        -U SA \
        -P "$(DB_PASSWORD)" \
        -C -Q "CREATE DATABASE TestDB"
    displayName: 'Start SQL Server container for $(distroName) $(targetArch)'
    env:
      DB_PASSWORD: $(DB_PASSWORD)

  - script: |
      # Install dependencies in the container
      if [ "$(distroName)" = "Ubuntu" ]; then
        docker exec build-container-$(distroName)-$(targetArch) bash -c "
          export DEBIAN_FRONTEND=noninteractive
          export TZ=UTC
          ln -snf /usr/share/zoneinfo/\$TZ /etc/localtime && echo \$TZ > /etc/timezone
          apt-get update && 
          apt-get install -y python$(pythonVersion) python$(pythonVersion)-dev python$(pythonVersion)-venv python3-pip cmake curl wget gnupg software-properties-common build-essential pybind11-dev
          
          # Create symlinks for easier access
          ln -sf /usr/bin/python$(pythonVersion) /usr/local/bin/python
          ln -sf /usr/bin/python$(pythonVersion) /usr/local/bin/python3
        "
      else
        # Debian
        docker exec build-container-$(distroName)-$(targetArch) bash -c "
          export DEBIAN_FRONTEND=noninteractive
          export TZ=UTC
          ln -snf /usr/share/zoneinfo/\$TZ /etc/localtime && echo \$TZ > /etc/timezone
          apt-get update && 
          apt-get install -y python$(pythonVersion) python$(pythonVersion)-dev python$(pythonVersion)-venv python3-pip cmake curl wget gnupg software-properties-common build-essential pybind11-dev
          
          # Create symlinks for easier access
          ln -sf /usr/bin/python$(pythonVersion) /usr/local/bin/python
          ln -sf /usr/bin/python$(pythonVersion) /usr/local/bin/python3
        "
      fi
    displayName: 'Install basic dependencies in $(distroName) $(targetArch) container'

  - script: |
      # Install ODBC driver in the container
      docker exec build-container-$(distroName)-$(targetArch) bash -c "
        export DEBIAN_FRONTEND=noninteractive
        
        # Download the package to configure the Microsoft repo
        if [ '$(distroName)' = 'Ubuntu' ]; then
          curl -sSL -O https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
        else
          # Debian 12
          curl -sSL -O https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb
        fi
        
        # Install the package
        dpkg -i packages-microsoft-prod.deb || true
        rm packages-microsoft-prod.deb
        
        # Update package list
        apt-get update
        
        # Install the driver
        ACCEPT_EULA=Y apt-get install -y msodbcsql18
        # optional: for bcp and sqlcmd
        ACCEPT_EULA=Y apt-get install -y mssql-tools18
        # optional: for unixODBC development headers
        apt-get install -y unixodbc-dev
      "
    displayName: 'Install ODBC Driver in $(distroName) $(targetArch) container'

  - script: |
      # Install Python dependencies in the container using virtual environment
      docker exec build-container-$(distroName)-$(targetArch) bash -c "
        # Create a virtual environment with the specific Python version
        python -m venv /opt/venv
        source /opt/venv/bin/activate
        
        # Install dependencies in the virtual environment
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install wheel setuptools
        
        # Make the virtual environment globally available
        echo 'source /opt/venv/bin/activate' >> ~/.bashrc
      "
    displayName: 'Install Python dependencies in $(distroName) $(targetArch) container'

  - script: |
      # Build pybind bindings in the container
      docker exec build-container-$(distroName)-$(targetArch) bash -c "
        source /opt/venv/bin/activate
        cd mssql_python/pybind
        chmod +x build.sh
        ./build.sh
      "
    displayName: 'Build pybind bindings (.so) in $(distroName) $(targetArch) container'

  - script: |
      # Uninstall ODBC Driver before running tests
      docker exec build-container-$(distroName)-$(targetArch) bash -c "
        export DEBIAN_FRONTEND=noninteractive
        apt-get remove --purge -y msodbcsql18 mssql-tools18 unixodbc-dev
        rm -f /usr/bin/sqlcmd
        rm -f /usr/bin/bcp
        rm -rf /opt/microsoft/msodbcsql
        rm -f /lib/x86_64-linux-gnu/libodbcinst.so.2
        rm -f /lib/aarch64-linux-gnu/libodbcinst.so.2
        odbcinst -u -d -n 'ODBC Driver 18 for SQL Server' || true
        echo 'Uninstalled ODBC Driver and cleaned up libraries'
        echo 'Verifying $(targetArch) debian_ubuntu driver library signatures:'
        if [ '$(targetArch)' = 'x86_64' ]; then
          ldd mssql_python/libs/linux/debian_ubuntu/x86_64/lib/libmsodbcsql-18.5.so.1.1
        else
          ldd mssql_python/libs/linux/debian_ubuntu/arm64/lib/libmsodbcsql-18.5.so.1.1
        fi
      "
    displayName: 'Uninstall ODBC Driver before running tests in $(distroName) $(targetArch) container'

  - script: |
      # Run tests in the container
      # Get SQL Server container IP
      SQLSERVER_IP=$(docker inspect sqlserver-$(distroName)-$(targetArch) --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
      echo "SQL Server IP: $SQLSERVER_IP"
      
      docker exec \
        -e DB_CONNECTION_STRING="Driver=ODBC Driver 18 for SQL Server;Server=$SQLSERVER_IP;Database=TestDB;Uid=SA;Pwd=$(DB_PASSWORD);TrustServerCertificate=yes" \
        -e DB_PASSWORD="$(DB_PASSWORD)" \
        build-container-$(distroName)-$(targetArch) bash -c "
        source /opt/venv/bin/activate
        echo 'Build successful, running tests now on $(distroName) $(targetArch)'
        echo 'Python version:' \$(python --version)
        echo 'Architecture:' \$(uname -m)
        echo 'Using connection string: Driver=ODBC Driver 18 for SQL Server;Server=$SQLSERVER_IP;Database=TestDB;Uid=SA;Pwd=***;TrustServerCertificate=yes'
        python -m pytest -v --junitxml=test-results-$(distroName)-$(targetArch).xml --cov=. --cov-report=xml:coverage-$(distroName)-$(targetArch).xml --capture=tee-sys --cache-clear
      "
    displayName: 'Run pytest with coverage in $(distroName) $(targetArch) container'
    env:
      DB_PASSWORD: $(DB_PASSWORD)

  - script: |
      # Build wheel package in the container
      docker exec build-container-$(distroName)-$(targetArch) bash -c "
        source /opt/venv/bin/activate
        echo 'Building wheel for $(distroName) $(targetArch) Python $(pythonVersion)'
        echo 'Python version:' \$(python --version)
        echo 'Architecture:' \$(uname -m)
        python -m pip install --upgrade pip wheel setuptools
        python setup.py bdist_wheel
        
        # Verify the wheel was created
        ls -la dist/
      "
    displayName: 'Build wheel package in $(distroName) $(targetArch) container'

  - script: |
      # Copy test results from container to host
      docker cp build-container-$(distroName)-$(targetArch):/workspace/test-results-$(distroName)-$(targetArch).xml $(Build.SourcesDirectory)/
      docker cp build-container-$(distroName)-$(targetArch):/workspace/coverage-$(distroName)-$(targetArch).xml $(Build.SourcesDirectory)/
      
      # Copy wheel files from container to host
      mkdir -p $(Build.ArtifactStagingDirectory)/dist
      docker cp build-container-$(distroName)-$(targetArch):/workspace/dist/. $(Build.ArtifactStagingDirectory)/dist/ || echo "Failed to copy dist directory"
      
      # Copy .so files from container to host
      mkdir -p $(Build.ArtifactStagingDirectory)/ddbc-bindings/linux/$(distroName)-$(targetArch)
      docker cp build-container-$(distroName)-$(targetArch):/workspace/mssql_python/ddbc_bindings.cp$(shortPyVer)-$(targetArch).so $(Build.ArtifactStagingDirectory)/ddbc-bindings/linux/$(distroName)-$(targetArch)/ || echo "Failed to copy .so files"
    displayName: 'Copy results and artifacts from $(distroName) $(targetArch) container'
    condition: always()

  - script: |
      # Clean up containers
      docker stop build-container-$(distroName)-$(targetArch) || true
      docker rm build-container-$(distroName)-$(targetArch) || true
      docker stop sqlserver-$(distroName)-$(targetArch) || true
      docker rm sqlserver-$(distroName)-$(targetArch) || true
    displayName: 'Clean up $(distroName) $(targetArch) containers'
    condition: always()

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-results-$(distroName)-$(targetArch).xml'
      testRunTitle: 'Publish pytest results on $(distroName) $(targetArch)'

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: 'coverage-$(distroName)-$(targetArch).xml'
    displayName: 'Publish code coverage results for $(distroName) $(targetArch)'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/ddbc-bindings'
      ArtifactName: 'mssql-python-ddbc-bindings'
      publishLocation: 'Container'
    displayName: 'Publish .so files as artifacts'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/dist'
      ArtifactName: 'mssql-python-wheels-dist'
      publishLocation: 'Container'
    displayName: 'Publish wheels as artifacts'
