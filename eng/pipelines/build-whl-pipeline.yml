name: build-whl-pipeline

trigger:
  branches:
    include: [main]

schedules:
  - cron: "30 1 * * *"  # Daily at 07:00 AM IST
    displayName: Daily run at 07:00 AM IST
    branches:
      include: [main]
    always: true

# Common variables
variables:
  - name: DB_PASSWORD
    value: $(DB_PASSWORD)
  - name: pythonVersions
    value: '3.10,3.11,3.12,3.13'

jobs:
# ===== Windows Build Job =====
- job: BuildWindowsWheels
  pool:
    vmImage: 'windows-latest'
  displayName: 'Build Windows'
  strategy:
    matrix:
      # Python 3.10 (x64 only)
      py310_x64:
        pythonVersion: '3.10'
        shortPyVer: '310'
        architecture: 'x64'
        targetArch: 'x64'
      
      # Python 3.11 (x64 + ARM64)
      py311_x64:
        pythonVersion: '3.11'
        shortPyVer: '311'
        architecture: 'x64'
        targetArch: 'x64'
      py311_arm64:
        pythonVersion: '3.11'
        shortPyVer: '311'
        architecture: 'x64'  # Build on x64 host
        targetArch: 'arm64'
      
      # Python 3.12 (x64 + ARM64)
      py312_x64:
        pythonVersion: '3.12'
        shortPyVer: '312'
        architecture: 'x64'
        targetArch: 'x64'
      py312_arm64:
        pythonVersion: '3.12'
        shortPyVer: '312'
        architecture: 'x64'
        targetArch: 'arm64'
      
      # Python 3.13 (x64 + ARM64)
      py313_x64:
        pythonVersion: '3.13'
        shortPyVer: '313'
        architecture: 'x64'
        targetArch: 'x64'
      py313_arm64:
        pythonVersion: '3.13'
        shortPyVer: '313'
        architecture: 'x64'
        targetArch: 'arm64'

  steps:
    # Setup Python
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        architecture: '$(architecture)'
        addToPath: true
      displayName: 'Setup Python $(pythonVersion) ($(architecture))'

    # Install dependencies
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt cmake pybind11
      displayName: 'Install dependencies'

    # Setup LocalDB for testing
    - powershell: |
        sqllocaldb create MSSQLLocalDB
        sqllocaldb start MSSQLLocalDB
      displayName: 'Start LocalDB'

    - powershell: |
        sqlcmd -S "(localdb)\MSSQLLocalDB" -Q "CREATE DATABASE TestDB"
        sqlcmd -S "(localdb)\MSSQLLocalDB" -Q "CREATE LOGIN testuser WITH PASSWORD = '$(DB_PASSWORD)'"
        sqlcmd -S "(localdb)\MSSQLLocalDB" -d TestDB -Q "CREATE USER testuser FOR LOGIN testuser"
        sqlcmd -S "(localdb)\MSSQLLocalDB" -d TestDB -Q "ALTER ROLE db_owner ADD MEMBER testuser"
      displayName: 'Setup test database'
      env:
        DB_PASSWORD: $(DB_PASSWORD)

    # Download ARM64 libs if building for ARM64
    - task: DownloadPipelineArtifact@2
      condition: eq(variables['targetArch'], 'arm64')
      inputs:
        buildType: 'specific'
        project: '$(System.TeamProject)'
        definition: 2162
        buildVersionToDownload: 'latest'
        artifactName: 'mssql-python-arm64-libs'
        targetPath: '$(Build.SourcesDirectory)\mssql_python\pybind\python_libs\arm64'
      displayName: 'Download ARM64 Python libs'

    # Build PYD
    - script: |
        echo Building for Python $(pythonVersion) $(targetArch)
        cd "$(Build.SourcesDirectory)\mssql_python\pybind"
        
        REM Set ARM64 lib path if needed
        if "$(targetArch)"=="arm64" (
          set CUSTOM_PYTHON_LIB_DIR=$(Build.SourcesDirectory)\mssql_python\pybind\python_libs\arm64
        )
        
        call build.bat $(targetArch)
        call keep_single_arch.bat $(targetArch)
        cd ..\..
      displayName: 'Build PYD for $(targetArch)'
      continueOnError: false

    # Run tests (skip for ARM64)
    - powershell: |
        if ("$(targetArch)" -eq "arm64") {
          Write-Host "Skipping tests on Windows ARM64"
        } else {
          python -m pytest -v
        }
      displayName: 'Run tests'
      env:
        DB_CONNECTION_STRING: 'Server=(localdb)\MSSQLLocalDB;Database=TestDB;Uid=testuser;Pwd=$(DB_PASSWORD);TrustServerCertificate=yes'

    # Copy artifacts
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\mssql_python\pybind\build\$(targetArch)\py$(shortPyVer)\Release'
        Contents: 'ddbc_bindings.cp$(shortPyVer)-*.pyd'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\ddbc-bindings\windows'
      displayName: 'Collect PYD files'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\mssql_python\pybind\build\$(targetArch)\py$(shortPyVer)\Release'
        Contents: 'ddbc_bindings.cp$(shortPyVer)-*.pdb'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\all-pdbs'
      displayName: 'Collect PDB files'

    # Build wheel
    - script: |
        python -m pip install wheel setuptools
        set ARCHITECTURE=$(targetArch)
        python setup.py bdist_wheel
      displayName: 'Build wheel'
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\dist'
        Contents: '*.whl'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\dist'
      displayName: 'Collect wheel'

    # Publish artifacts
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\ddbc-bindings'
        ArtifactName: 'mssql-python-ddbc-bindings'
      displayName: 'Publish PYD artifacts'

    - task: PublishBuildArtifacts@1
      condition: eq(variables['targetArch'], 'arm64')
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\mssql_python\pybind\python_libs\arm64'
        ArtifactName: 'mssql-python-arm64-libs'
      displayName: 'Publish ARM64 libs'
    
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\dist'
        ArtifactName: 'mssql-python-wheels-dist'
      displayName: 'Publish wheels'

# ===== macOS Build Job =====
- job: BuildMacOSWheels
  pool:
    vmImage: 'macos-latest'
  displayName: 'Build macOS'
  strategy:
    matrix:
      # All versions use universal2 (x86_64 + arm64)
      py310_universal2: {pythonVersion: '3.10', shortPyVer: '310', targetArch: 'universal2'}
      py311_universal2: {pythonVersion: '3.11', shortPyVer: '311', targetArch: 'universal2'}
      py312_universal2: {pythonVersion: '3.12', shortPyVer: '312', targetArch: 'universal2'}
      py313_universal2: {pythonVersion: '3.13', shortPyVer: '313', targetArch: 'universal2'}

  steps:
    # Setup Python
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
      displayName: 'Setup Python $(pythonVersion)'

    # Install dependencies
    - script: |
        brew update && brew install cmake
        python -m pip install --upgrade pip
        pip install -r requirements.txt cmake pybind11
      displayName: 'Install dependencies'

    # Build .so file
    - script: |
        echo "Building universal2 binary for Python $(pythonVersion)"
        cd "$(Build.SourcesDirectory)/mssql_python/pybind"
        ./build.sh
      displayName: 'Build .so file'

    # Copy artifacts
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/mssql_python'
        Contents: '*.so'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/ddbc-bindings/macOS'
      displayName: 'Collect .so files'

    # Setup Docker for SQL Server
    - script: |
        brew update && brew install docker colima
        # Try VZ virtualization first, fallback to QEMU
        colima start --cpu 3 --memory 10 --disk 30 --vm-type=vz || \
        colima start --cpu 3 --memory 10 --disk 30 --vm-type=qemu
        sleep 30
        docker version
      displayName: 'Setup Docker with Colima'
      timeoutInMinutes: 15

    # Start SQL Server
    - script: |
        docker pull mcr.microsoft.com/mssql/server:2022-latest
        docker run -d --name sqlserver \
          -e ACCEPT_EULA=Y \
          -e MSSQL_SA_PASSWORD="${DB_PASSWORD}" \
          -p 1433:1433 \
          mcr.microsoft.com/mssql/server:2022-latest
        
        # Wait for SQL Server
        for i in {1..30}; do
          docker exec sqlserver /opt/mssql-tools18/bin/sqlcmd \
            -S localhost -U SA -P "$DB_PASSWORD" -C -Q "SELECT 1" && break
          sleep 2
        done
      displayName: 'Start SQL Server'
      env:
        DB_PASSWORD: $(DB_PASSWORD)

    # Run tests
    - script: python -m pytest -v
      displayName: 'Run tests'
      env:
        DB_CONNECTION_STRING: 'Driver=ODBC Driver 18 for SQL Server;Server=localhost;Database=master;Uid=SA;Pwd=$(DB_PASSWORD);TrustServerCertificate=yes'

    # Build wheel
    - script: |
        python -m pip install wheel setuptools
        python setup.py bdist_wheel
      displayName: 'Build wheel'
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/dist'
        Contents: '*.whl'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/dist'
      displayName: 'Collect wheel'
    
    # Publish artifacts
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/ddbc-bindings'
        ArtifactName: 'mssql-python-ddbc-bindings'
      displayName: 'Publish .so artifacts'
    
    - task: PublishBuildArtifacts@1
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/dist'
        ArtifactName: 'mssql-python-wheels-dist'
      displayName: 'Publish wheels'

# ===== Linux Build Job =====
- job: BuildLinuxWheels
  pool:
    vmImage: 'ubuntu-latest'
  displayName: 'Build Linux'
  timeoutInMinutes: 120

  strategy:
    matrix:
      # Python 3.10
      py310_x86_64_ubuntu:   {pythonVersion: '3.10', shortPyVer: '310', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'ubuntu:22.04', distroName: 'Ubuntu', packageManager: 'apt'}
      py310_arm64_ubuntu:    {pythonVersion: '3.10', shortPyVer: '310', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'ubuntu:22.04', distroName: 'Ubuntu', packageManager: 'apt'}
      py310_x86_64_debian:   {pythonVersion: '3.10', shortPyVer: '310', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'debian:12',    distroName: 'Debian', packageManager: 'apt'}
      py310_arm64_debian:    {pythonVersion: '3.10', shortPyVer: '310', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'debian:12',    distroName: 'Debian', packageManager: 'apt'}
      py310_x86_64_rhel:     {pythonVersion: '3.10', shortPyVer: '310', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'registry.access.redhat.com/ubi9/ubi:latest', distroName: 'RHEL', packageManager: 'dnf', buildFromSource: 'true'}
      py310_arm64_rhel:      {pythonVersion: '3.10', shortPyVer: '310', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'registry.access.redhat.com/ubi9/ubi:latest', distroName: 'RHEL', packageManager: 'dnf', buildFromSource: 'true'}
      py310_x86_64_alpine:   {pythonVersion: '3.10', shortPyVer: '310', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'alpine:latest',  distroName: 'alpine', packageManager: 'apk'}
      py310_arm64_alpine:    {pythonVersion: '3.10', shortPyVer: '310', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'alpine:latest',  distroName: 'alpine', packageManager: 'apk'}
      
      # Python 3.11
      py311_x86_64_ubuntu:   {pythonVersion: '3.11', shortPyVer: '311', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'ubuntu:22.04', distroName: 'Ubuntu', packageManager: 'apt'}
      py311_arm64_ubuntu:    {pythonVersion: '3.11', shortPyVer: '311', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'ubuntu:22.04', distroName: 'Ubuntu', packageManager: 'apt'}
      py311_x86_64_debian:   {pythonVersion: '3.11', shortPyVer: '311', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'debian:12',    distroName: 'Debian', packageManager: 'apt'}
      py311_arm64_debian:    {pythonVersion: '3.11', shortPyVer: '311', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'debian:12',    distroName: 'Debian', packageManager: 'apt'}
      py311_x86_64_rhel:     {pythonVersion: '3.11', shortPyVer: '311', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'registry.access.redhat.com/ubi9/ubi:latest', distroName: 'RHEL', packageManager: 'dnf'}
      py311_arm64_rhel:      {pythonVersion: '3.11', shortPyVer: '311', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'registry.access.redhat.com/ubi9/ubi:latest', distroName: 'RHEL', packageManager: 'dnf'}
      py311_x86_64_alpine:   {pythonVersion: '3.11', shortPyVer: '311', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'alpine:latest',  distroName: 'alpine', packageManager: 'apk'}
      py311_arm64_alpine:    {pythonVersion: '3.11', shortPyVer: '311', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'alpine:latest',  distroName: 'alpine', packageManager: 'apk'}
      
      # Python 3.12 (not available for Ubuntu 22.04)
      py312_x86_64_debian:   {pythonVersion: '3.12', shortPyVer: '312', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'debian:12',    distroName: 'Debian', packageManager: 'apt'}
      py312_arm64_debian:    {pythonVersion: '3.12', shortPyVer: '312', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'debian:12',    distroName: 'Debian', packageManager: 'apt'}
      py312_x86_64_rhel:     {pythonVersion: '3.12', shortPyVer: '312', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'registry.access.redhat.com/ubi9/ubi:latest', distroName: 'RHEL', packageManager: 'dnf'}
      py312_arm64_rhel:      {pythonVersion: '3.12', shortPyVer: '312', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'registry.access.redhat.com/ubi9/ubi:latest', distroName: 'RHEL', packageManager: 'dnf'}
      py312_x86_64_alpine:   {pythonVersion: '3.12', shortPyVer: '312', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'alpine:latest',  distroName: 'alpine', packageManager: 'apk'}
      py312_arm64_alpine:    {pythonVersion: '3.12', shortPyVer: '312', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'alpine:latest',  distroName: 'alpine', packageManager: 'apk'}
      
      # Python 3.13
      py313_x86_64_ubuntu:   {pythonVersion: '3.13', shortPyVer: '313', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'ubuntu:22.04', distroName: 'Ubuntu', packageManager: 'apt'}
      py313_arm64_ubuntu:    {pythonVersion: '3.13', shortPyVer: '313', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'ubuntu:22.04', distroName: 'Ubuntu', packageManager: 'apt'}
      py313_x86_64_debian:   {pythonVersion: '3.13', shortPyVer: '313', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'debian:12',    distroName: 'Debian', packageManager: 'apt'}
      py313_arm64_debian:    {pythonVersion: '3.13', shortPyVer: '313', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'debian:12',    distroName: 'Debian', packageManager: 'apt'}
      py313_x86_64_rhel:     {pythonVersion: '3.13', shortPyVer: '313', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'registry.access.redhat.com/ubi9/ubi:latest', distroName: 'RHEL', packageManager: 'dnf', buildFromSource: 'true'}
      py313_arm64_rhel:      {pythonVersion: '3.13', shortPyVer: '313', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'registry.access.redhat.com/ubi9/ubi:latest', distroName: 'RHEL', packageManager: 'dnf', buildFromSource: 'true'}
      py313_x86_64_alpine:   {pythonVersion: '3.13', shortPyVer: '313', targetArch: 'x86_64', dockerPlatform: 'linux/amd64', dockerImage: 'alpine:latest',  distroName: 'alpine', packageManager: 'apk'}
      py313_arm64_alpine:    {pythonVersion: '3.13', shortPyVer: '313', targetArch: 'arm64',  dockerPlatform: 'linux/arm64', dockerImage: 'alpine:latest',  distroName: 'alpine', packageManager: 'apk'}

  steps:
  # Setup Docker buildx
  - script: |
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      docker buildx create --name multiarch --driver docker-container --use || true
      docker buildx inspect --bootstrap
    displayName: 'Setup Docker buildx'

  # Create build container
  - script: |
      docker run -d --name build-container-$(distroName)-$(targetArch) \
        --platform $(dockerPlatform) \
        -v $(Build.SourcesDirectory):/workspace \
        -w /workspace \
        --network bridge \
        $(dockerImage) \
        tail -f /dev/null
    displayName: 'Create container'

  # Start SQL Server
  - script: |
      docker run -d --name sqlserver-$(distroName)-$(targetArch) \
        --platform linux/amd64 \
        -e ACCEPT_EULA=Y \
        -e MSSQL_SA_PASSWORD="$(DB_PASSWORD)" \
        -p 1433:1433 \
        mcr.microsoft.com/mssql/server:2022-latest
      
      # Wait for SQL Server
      echo "Waiting for SQL Server..."
      for i in {1..60}; do
        if docker exec sqlserver-$(distroName)-$(targetArch) \
          /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P "$(DB_PASSWORD)" -C -Q "SELECT 1" >/dev/null 2>&1; then
          echo "SQL Server ready!"
          break
        fi
        sleep 2
      done
      
      # Create test database
      docker exec sqlserver-$(distroName)-$(targetArch) \
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U SA -P "$(DB_PASSWORD)" -C -Q "CREATE DATABASE TestDB"
    displayName: 'Start SQL Server'
    env:
      DB_PASSWORD: $(DB_PASSWORD)

  # Install base dependencies
  - script: |
      if [ "$(packageManager)" = "apt" ]; then
        docker exec build-container-$(distroName)-$(targetArch) bash -c "
          export DEBIAN_FRONTEND=noninteractive TZ=UTC
          ln -snf /usr/share/zoneinfo/\$TZ /etc/localtime && echo \$TZ > /etc/timezone
          apt-get update
          apt-get install -y software-properties-common curl wget gnupg build-essential cmake
          
          # Add deadsnakes PPA for Ubuntu
          if [ '$(distroName)' = 'Ubuntu' ]; then
            add-apt-repository -y ppa:deadsnakes/ppa && apt-get update
          fi
        "
      elif [ "$(packageManager)" = "apk" ]; then
        docker exec build-container-$(distroName)-$(targetArch) sh -c "
          apk update
          apk add --no-cache build-base cmake clang git bash wget curl gnupg \
            unixodbc unixodbc-dev libffi-dev openssl-dev zlib-dev patchelf
        "
      else
        # RHEL/DNF
        docker exec build-container-$(distroName)-$(targetArch) bash -c "
          dnf install -y dnf-plugins-core || true
          dnf install -y epel-release || echo 'EPEL not available'
          dnf config-manager --set-enabled crb || dnf config-manager --set-enabled powertools || true
          dnf update -y
          dnf install -y gcc gcc-c++ make cmake wget gnupg2 glibc-devel kernel-headers
          dnf install -y --allowerasing curl || true
          dnf install -y openssl-devel bzip2-devel libffi-devel zlib-devel || true
        "
      fi
    displayName: 'Install base dependencies'

  # Install Python
  - template: templates/install-python-linux.yml
    parameters:
      distroName: $(distroName)
      packageManager: $(packageManager)
      pythonVersion: $(pythonVersion)
      targetArch: $(targetArch)

  # Install ODBC driver
  - template: templates/install-odbc-linux.yml
    parameters:
      distroName: $(distroName)
      packageManager: $(packageManager)
      targetArch: $(targetArch)

  # Install Python packages
  - script: |
      docker exec build-container-$(distroName)-$(targetArch) bash -c "
        # Setup Python environment for Alpine
        if [ '$(packageManager)' = 'apk' ] && [ '$(pythonVersion)' != '3.12' ]; then
          export PYTHONHOME=/usr/local
          export PYTHONPATH=/usr/local/lib/python$(pythonVersion)
          export LD_LIBRARY_PATH=/usr/local/lib:\$LD_LIBRARY_PATH
        fi
        
        # Find Python command
        if [ '$(packageManager)' = 'apk' ] && [ '$(pythonVersion)' = '3.12' ]; then
          PYTHON_CMD=python3
        elif command -v /usr/local/bin/python$(pythonVersion) >/dev/null 2>&1; then
          PYTHON_CMD=/usr/local/bin/python$(pythonVersion)
        elif command -v python$(pythonVersion) >/dev/null 2>&1; then
          PYTHON_CMD=python$(pythonVersion)
        else
          PYTHON_CMD=python3
        fi
        
        # Create virtual environment
        \$PYTHON_CMD -m venv /workspace/venv
        source /workspace/venv/bin/activate
        
        # Install packages
        python -m pip install --upgrade pip
        python -m pip install pybind11 wheel setuptools
        python -m pip install -r requirements.txt
      "
    displayName: 'Install Python packages'

  # Build bindings
  - script: |
      docker exec build-container-$(distroName)-$(targetArch) bash -c "
        source /workspace/venv/bin/activate
        cd mssql_python/pybind
        chmod +x build.sh
        ./build.sh
      "
    displayName: 'Build bindings'

  # Uninstall ODBC for testing
  - template: templates/uninstall-odbc-linux.yml
    parameters:
      distroName: $(distroName)
      packageManager: $(packageManager)
      targetArch: $(targetArch)

  # Run tests
  - script: |
      SQLSERVER_IP=$(docker inspect sqlserver-$(distroName)-$(targetArch) --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
      
      docker exec \
        -e DB_CONNECTION_STRING="Driver=ODBC Driver 18 for SQL Server;Server=$SQLSERVER_IP;Database=TestDB;Uid=SA;Pwd=$(DB_PASSWORD);TrustServerCertificate=yes" \
        -e DB_PASSWORD="$(DB_PASSWORD)" \
        build-container-$(distroName)-$(targetArch) bash -c "
        # Setup Python environment for Alpine
        if [ '$(packageManager)' = 'apk' ] && [ '$(pythonVersion)' != '3.12' ]; then
          export PYTHONHOME=/usr/local
          export PYTHONPATH=/usr/local/lib/python$(pythonVersion)
          export LD_LIBRARY_PATH=/usr/local/lib:\$LD_LIBRARY_PATH
        fi
        
        source /workspace/venv/bin/activate
        python -m pytest -v --junitxml=test-results-$(distroName)-$(targetArch).xml \
          --cov=. --cov-report=xml:coverage-$(distroName)-$(targetArch).xml \
          --capture=tee-sys --cache-clear
      "
    displayName: 'Run tests'
    env:
      DB_PASSWORD: $(DB_PASSWORD)

  # Build wheel
  - script: |
      docker exec build-container-$(distroName)-$(targetArch) bash -c "
        # Setup Python environment for Alpine
        if [ '$(packageManager)' = 'apk' ] && [ '$(pythonVersion)' != '3.12' ]; then
          export PYTHONHOME=/usr/local
          export PYTHONPATH=/usr/local/lib/python$(pythonVersion)
          export LD_LIBRARY_PATH=/usr/local/lib:\$LD_LIBRARY_PATH
        fi
        
        source /workspace/venv/bin/activate
        python setup.py bdist_wheel
        ls -la dist/
      "
    displayName: 'Build wheel'

  # Copy artifacts
  - script: |
      # Copy test results
      docker cp build-container-$(distroName)-$(targetArch):/workspace/test-results-$(distroName)-$(targetArch).xml $(Build.SourcesDirectory)/
      docker cp build-container-$(distroName)-$(targetArch):/workspace/coverage-$(distroName)-$(targetArch).xml $(Build.SourcesDirectory)/
      
      # Copy wheels
      mkdir -p $(Build.ArtifactStagingDirectory)/dist
      docker cp build-container-$(distroName)-$(targetArch):/workspace/dist/. $(Build.ArtifactStagingDirectory)/dist/ || true
      
      # Copy .so files
      mkdir -p $(Build.ArtifactStagingDirectory)/ddbc-bindings/linux/$(distroName)-$(targetArch)
      docker cp build-container-$(distroName)-$(targetArch):/workspace/mssql_python/ddbc_bindings.cp$(shortPyVer)-$(targetArch).so \
        $(Build.ArtifactStagingDirectory)/ddbc-bindings/linux/$(distroName)-$(targetArch)/ || true
    displayName: 'Copy artifacts'
    condition: always()

  # Cleanup
  - script: |
      docker stop build-container-$(distroName)-$(targetArch) || true
      docker rm build-container-$(distroName)-$(targetArch) || true
      docker stop sqlserver-$(distroName)-$(targetArch) || true
      docker rm sqlserver-$(distroName)-$(targetArch) || true
    displayName: 'Cleanup containers'
    condition: always()

  # Publish results
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-results-$(distroName)-$(targetArch).xml'
      testRunTitle: 'Tests - $(distroName) $(targetArch)'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/ddbc-bindings'
      ArtifactName: 'mssql-python-ddbc-bindings'
    displayName: 'Publish bindings'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/dist'
      ArtifactName: 'mssql-python-wheels-dist'
    displayName: 'Publish wheels'