parameters:
  - name: distroName
    type: string
  - name: packageManager
    type: string
  - name: pythonVersion
    type: string
  - name: targetArch
    type: string

steps:
- script: |
    if [ "${{ parameters.packageManager }}" = "apt" ]; then
      docker exec build-container-${{ parameters.distroName }}-${{ parameters.targetArch }} bash -c "
        # Handle Python installation for Debian/Ubuntu
        if [ '${{ parameters.distroName }}' = 'Debian' ]; then
          case '${{ parameters.pythonVersion }}' in
            '3.11')
              apt-get install -y python${{ parameters.pythonVersion }} python${{ parameters.pythonVersion }}-dev python${{ parameters.pythonVersion }}-venv
              ;;
            '3.10'|'3.12')
              apt-get install -y python3 python3-dev python3-venv
              ln -sf /usr/bin/python3 /usr/local/bin/python${{ parameters.pythonVersion }}
              ;;
            '3.13')
              # Build from source
              apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
                wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev
              cd /tmp
              wget https://www.python.org/ftp/python/3.13.1/Python-3.13.1.tgz
              tar -xzf Python-3.13.1.tgz
              cd Python-3.13.1
              
              # Disable optimizations for ARM64
              if [ '${{ parameters.targetArch }}' = 'arm64' ]; then
                export CFLAGS='-O0 -fno-strict-overflow'
                export CXXFLAGS='-O0'
              fi
              
              ./configure --prefix=/usr/local --with-ensurepip=install --enable-loadable-sqlite-extensions --with-openssl=/usr
              make -j1
              make altinstall
              ln -sf /usr/local/bin/python${{ parameters.pythonVersion }} /usr/local/bin/python
              ;;
          esac
        else
          # Ubuntu - use deadsnakes PPA
          if [ '${{ parameters.pythonVersion }}' = '3.12' ] || [ '${{ parameters.pythonVersion }}' = '3.13' ]; then
            apt-get install -y python${{ parameters.pythonVersion }} python${{ parameters.pythonVersion }}-dev python${{ parameters.pythonVersion }}-venv
          else
            apt-get install -y python${{ parameters.pythonVersion }} python${{ parameters.pythonVersion }}-dev python${{ parameters.pythonVersion }}-venv python${{ parameters.pythonVersion }}-distutils
          fi
          ln -sf /usr/bin/python${{ parameters.pythonVersion }} /usr/local/bin/python${{ parameters.pythonVersion }}
          ln -sf /usr/bin/python${{ parameters.pythonVersion }} /usr/local/bin/python
        fi
        
        # Install pip
        curl -sS https://bootstrap.pypa.io/get-pip.py | python${{ parameters.pythonVersion }}
      "
    elif [ "${{ parameters.packageManager }}" = "apk" ]; then
      docker exec build-container-${{ parameters.distroName }}-${{ parameters.targetArch }} sh -c "
        if [ '${{ parameters.pythonVersion }}' = '3.12' ]; then
          # Use pre-installed Python 3.12
          apk add --no-cache py3-pip python3-dev
          ln -sf python3 /usr/bin/python || true
        else
          # Build from source
          apk add --no-cache tar xz ncurses-dev sqlite-dev readline-dev tk-dev gdbm-dev db-dev bzip2-dev xz-dev linux-headers
          cd /tmp
          wget https://www.python.org/ftp/python/${{ parameters.pythonVersion }}.1/Python-${{ parameters.pythonVersion }}.1.tgz
          tar xzf Python-${{ parameters.pythonVersion }}.1.tgz
          cd Python-${{ parameters.pythonVersion }}.1
          
          # Configure for musl libc
          export ac_cv_file__dev_ptmx=yes ac_cv_file__dev_ptc=no
          export ac_cv_have_long_long_format=yes ax_cv_c_float_words_bigendian=no
          export ac_cv_sizeof_long=8 ac_cv_sizeof_size_t=8 ac_cv_sizeof_pid_t=4 ac_cv_sizeof_void_p=8
          
          ./configure --prefix=/usr/local --enable-shared --with-ensurepip=install --disable-ipv6 \
            --build=aarch64-alpine-linux-musl --host=aarch64-alpine-linux-musl --target=aarch64-alpine-linux-musl \
            CPPFLAGS='-I/usr/include -DLONG_BIT=64' LDFLAGS='-L/usr/lib -Wl,-rpath,/usr/local/lib' CFLAGS='-DLONG_BIT=64'
          
          make -j\$(nproc)
          make altinstall
          
          # Setup environment
          export PYTHONHOME=/usr/local
          export PYTHONPATH=/usr/local/lib/python${{ parameters.pythonVersion }}
          export LD_LIBRARY_PATH=/usr/local/lib:\$LD_LIBRARY_PATH
          
          ln -sf /usr/local/bin/python${{ parameters.pythonVersion }} /usr/local/bin/python
          ln -sf /usr/local/bin/pip${{ parameters.pythonVersion }} /usr/local/bin/pip
          
          # Persist environment
          echo 'export PYTHONHOME=/usr/local' >> /etc/profile
          echo 'export PYTHONPATH=/usr/local/lib/python${{ parameters.pythonVersion }}' >> /etc/profile
          echo 'export LD_LIBRARY_PATH=/usr/local/lib:\$LD_LIBRARY_PATH' >> /etc/profile
        fi
      "
    else
      # RHEL/DNF
      docker exec build-container-${{ parameters.distroName }}-${{ parameters.targetArch }} bash -c "
        # Try to install from repos first
        if dnf install -y python${{ parameters.pythonVersion }} python${{ parameters.pythonVersion }}-devel python${{ parameters.pythonVersion }}-pip; then
          ln -sf /usr/bin/python${{ parameters.pythonVersion }} /usr/local/bin/python${{ parameters.pythonVersion }}
          ln -sf /usr/bin/python${{ parameters.pythonVersion }} /usr/local/bin/python
        elif [ '${{ parameters.pythonVersion }}' = '3.10' ] || [ '${{ parameters.pythonVersion }}' = '3.13' ]; then
          # Build from source
          cd /tmp
          if [ '${{ parameters.pythonVersion }}' = '3.10' ]; then
            wget https://www.python.org/ftp/python/3.10.15/Python-3.10.15.tgz -O python-${{ parameters.pythonVersion }}.tgz
          else
            wget https://www.python.org/ftp/python/3.13.1/Python-3.13.1.tgz -O python-${{ parameters.pythonVersion }}.tgz
          fi
          
          tar -xzf python-${{ parameters.pythonVersion }}.tgz
          cd Python-${{ parameters.pythonVersion }}*
          
          # Disable optimizations for ARM64
          export CFLAGS='-O0 -fno-strict-overflow'
          export CXXFLAGS='-O0'
          
          ./configure --prefix=/usr/local --with-ensurepip=install --enable-loadable-sqlite-extensions --with-openssl=/usr
          make -j1
          make altinstall
          ln -sf /usr/local/bin/python${{ parameters.pythonVersion }} /usr/local/bin/python
        fi
      "
    fi
  displayName: 'Install Python ${{ parameters.pythonVersion }}'
