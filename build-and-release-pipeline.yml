trigger:
  branches:
    include:
      - main
      - release/*

jobs:
  - job: build_wheels
    displayName: Build wheels
    strategy:
      matrix:
        windows_py38_x64:
          python_version: '3.8'
          python_version_no_dot: '38'
          os: windows-latest
          arch: AMD64
          arch_tag: win_amd64
        windows_py39_x64:
          python_version: '3.9'
          python_version_no_dot: '39'
          os: windows-latest
          arch: AMD64
          arch_tag: win_amd64
        windows_py310_x64:
          python_version: '3.10'
          python_version_no_dot: '310'
          os: windows-latest
          arch: AMD64
          arch_tag: win_amd64
        windows_py311_x64:
          python_version: '3.11'
          python_version_no_dot: '311'
          os: windows-latest
          arch: AMD64
          arch_tag: win_amd64
        windows_py312_x64:
          python_version: '3.12'
          python_version_no_dot: '312'
          os: windows-latest
          arch: AMD64
          arch_tag: win_amd64
        windows_py38_x86:
          python_version: '3.8'
          python_version_no_dot: '38'
          os: windows-latest
          arch: x86
          arch_tag: win32
        windows_py38_arm64:
          python_version: '3.8'
          python_version_no_dot: '38'
          os: windows-latest
          arch: ARM64
          arch_tag: win_arm64

    pool:
      vmImage: $(os)

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(python_version)
          architecture: $(arch)

      - script: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pybind11 delvewheel
        displayName: Install build dependencies
        
      - script: |
          python -m pip install cibuildwheel
        displayName: Install cibuildwheel

      # Special handling for ARM64 builds since CI machines may not be ARM64 hardware
      - task: PowerShell@2
        displayName: Configure cross-compilation for ARM64
        condition: eq(variables['arch'], 'ARM64')
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Configuring cross-compilation for ARM64"
            
            # Set environment variables to help with cross-compilation
            echo "##vso[task.setvariable variable=SETUPTOOLS_USE_DISTUTILS]local"
            echo "##vso[task.setvariable variable=SETUPTOOLS_BUILD_HOOK_KWARGS]{\"py_limited_api\": false}"
            
            # Configure Visual Studio for ARM64 
            $vsPath = & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
            if ($vsPath) {
              $vcvarsall = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
              if (Test-Path $vcvarsall) {
                Write-Host "Found vcvarsall.bat at $vcvarsall"
                echo "##vso[task.setvariable variable=VCVARSALL_PATH]$vcvarsall"
              }
            }

      - script: |
          python -m cibuildwheel --output-dir dist
        displayName: Build wheels
        env:
          CIBW_BUILD: cp$(python_version_no_dot)-$(arch_tag)
          CIBW_ARCHS: $(arch)

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: './dist'
          artifactName: wheels
